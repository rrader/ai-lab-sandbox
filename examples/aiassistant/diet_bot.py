import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from langchain.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è LLM
llm = ChatOpenAI(
    openai_api_key=os.getenv("OPENROUTER_API_KEY"),
    openai_api_base="https://openrouter.ai/api/v1",
    model_name="google/gemini-2.0-flash-lite-preview-02-05:free",
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = """
    üëã –í—ñ—Ç–∞—î–º–æ —É DietPlanner Bot! 
    
    –Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑:
    /plan - –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è
    /recipe - –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑–¥–æ—Ä–æ–≤–∏—Ö —Ä–µ—Ü–µ–ø—Ç—ñ–≤
    /calories - –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –¥–ª—è —Å—Ç—Ä–∞–≤–∏
    
    –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—ñ –∫–æ–º–∞–Ω–¥–∏!
    """
    await update.message.reply_text(welcome_message)

async def get_ai_response(prompt_template: str, **kwargs) -> str:
    try:
        prompt = PromptTemplate(template=prompt_template, input_variables=list(kwargs.keys()))
        chain = LLMChain(prompt=prompt, llm=llm)
        response = chain.run(**kwargs)
        return response
    except Exception as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        return "–í–∏–±–∞—á—Ç–µ, –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

async def plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plan_template = """–°—Ç–≤–æ—Ä—ñ—Ç—å –∑–¥–æ—Ä–æ–≤–∏–π –ø–ª–∞–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —Ç–∞–∫–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:
    
    –°–Ω—ñ–¥–∞–Ω–æ–∫:
    - –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Å—Ç—Ä–∞–≤ –∑ –ø–æ—Ä—Ü—ñ—è–º–∏
    - –ü—Ä–∏–±–ª–∏–∑–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó
    
    –û–±—ñ–¥:
    - –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Å—Ç—Ä–∞–≤ –∑ –ø–æ—Ä—Ü—ñ—è–º–∏
    - –ü—Ä–∏–±–ª–∏–∑–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó
    
    –í–µ—á–µ—Ä—è:
    - –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Å—Ç—Ä–∞–≤ –∑ –ø–æ—Ä—Ü—ñ—è–º–∏
    - –ü—Ä–∏–±–ª–∏–∑–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó
    
    –ü–µ—Ä–µ–∫—É—Å–∫–∏:
    - 2-3 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–¥–æ—Ä–æ–≤–∏—Ö –ø–µ—Ä–µ–∫—É—Å–æ–∫
    - –ü—Ä–∏–±–ª–∏–∑–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó
    
    –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª–æ—Ä—ñ–π –∑–∞ –¥–µ–Ω—å —Ç–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª –º–∞–∫—Ä–æ–µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
    """
    
    response = await get_ai_response(plan_template)
    await update.message.reply_text(response)

async def recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    recipe_template = """–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ –∑–¥–æ—Ä–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç –∑ —Ç–∞–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏:
    
    1. –ù–∞–∑–≤–∞ —Ä–µ—Ü–µ–ø—Ç—É
    2. –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é
    3. –ü–æ–∫—Ä–æ–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è
    4. –ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è
    5. –•–∞—Ä—á–æ–≤–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å –Ω–∞ –ø–æ—Ä—Ü—ñ—é (–∫–∞–ª–æ—Ä—ñ—ó, –±—ñ–ª–∫–∏, –≤—É–≥–ª–µ–≤–æ–¥–∏, –∂–∏—Ä–∏)
    6. –ü–æ—Ä–∞–¥–∏ —â–æ–¥–æ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è
    """
    
    response = await get_ai_response(recipe_template)
    await update.message.reply_text(response)

async def calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = " ".join(context.args)
    if not user_input:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∫–∞–ª–æ—Ä—ñ–π. –ü—Ä–∏–∫–ª–∞–¥: /calories —Ä–∏—Å –∫—É—Ä–∫–∞ –±—Ä–æ–∫–æ–ª—ñ")
        return
    
    calories_template = """–†–æ–∑—Ä–∞—Ö—É–π—Ç–µ —Ö–∞—Ä—á–æ–≤—É —Ü—ñ–Ω–Ω—ñ—Å—Ç—å –¥–ª—è: {food_items}
    
    –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ:
    1. –ó–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª–æ—Ä—ñ–π
    2. –í–º—ñ—Å—Ç –±—ñ–ª–∫—ñ–≤
    3. –í–º—ñ—Å—Ç –≤—É–≥–ª–µ–≤–æ–¥—ñ–≤
    4. –í–º—ñ—Å—Ç –∂–∏—Ä—ñ–≤
    5. –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ —Ö–∞—Ä—á–æ–≤–æ—ó —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ
    """
    
    response = await get_ai_response(calories_template, food_items=user_input)
    await update.message.reply_text(response)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    chat_template = """–Ø–∫ –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥—ñ—î—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–ø–æ–º–æ–∂—ñ—Ç—å –∑ —Ü–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º: {question}
    –ù–∞–¥–∞–π—Ç–µ —á—ñ—Ç–∫—ñ, —Å—Ç–∏—Å–ª—ñ —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏, –∑–∞—Å–Ω–æ–≤–∞–Ω—ñ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è."""
    
    response = await get_ai_response(chat_template, question=message)
    await update.message.reply_text(response)

def main():
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("plan", plan))
    application.add_handler(CommandHandler("recipe", recipe))
    application.add_handler(CommandHandler("calories", calories))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    application.run_polling()

if __name__ == "__main__":
    main() 